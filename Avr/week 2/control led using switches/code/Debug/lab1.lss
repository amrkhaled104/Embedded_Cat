
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000048c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a93  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define PINB  *((volatile u8 *)0x36) // Input Pins Register B
#define DDRD  *((u8 *)0x31)      // Data Direction Register D
#define PORTD *((u8 *)0x32)      // Port D Register
#define PIND  *((volatile u8 *)0x30) // Input Pins Register D

int main() {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0x03;
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	83 e0       	ldi	r24, 0x03	; 3
  7a:	80 83       	st	Z, r24
    DDRB = 0x00;
  7c:	e7 e3       	ldi	r30, 0x37	; 55
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	10 82       	st	Z, r1

    PORTA = 0x00;
  82:	eb e3       	ldi	r30, 0x3B	; 59
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	10 82       	st	Z, r1
    PORTB = 0x07;
  88:	e8 e3       	ldi	r30, 0x38	; 56
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	87 e0       	ldi	r24, 0x07	; 7
  8e:	80 83       	st	Z, r24
    while (1) {
        if (!READ_BIT(PINB, 2)) {
  90:	e6 e3       	ldi	r30, 0x36	; 54
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	86 95       	lsr	r24
  98:	86 95       	lsr	r24
  9a:	88 23       	and	r24, r24
  9c:	61 f4       	brne	.+24     	; 0xb6 <main+0x4a>
            if (!READ_BIT(PINB, 2)) {
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	86 95       	lsr	r24
  a6:	86 95       	lsr	r24
  a8:	88 23       	and	r24, r24
  aa:	91 f7       	brne	.-28     	; 0x90 <main+0x24>
            PORTA = 0x03;
  ac:	eb e3       	ldi	r30, 0x3B	; 59
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	80 83       	st	Z, r24
  b4:	ed cf       	rjmp	.-38     	; 0x90 <main+0x24>
            }
        }
        else if (!READ_BIT(PINB,0)) {
  b6:	e6 e3       	ldi	r30, 0x36	; 54
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	88 23       	and	r24, r24
  be:	51 f4       	brne	.+20     	; 0xd4 <main+0x68>
            if (!READ_BIT(PINB,0)) {
  c0:	e6 e3       	ldi	r30, 0x36	; 54
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 23       	and	r24, r24
  c8:	19 f7       	brne	.-58     	; 0x90 <main+0x24>
            PORTA = 0x01;
  ca:	eb e3       	ldi	r30, 0x3B	; 59
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 83       	st	Z, r24
  d2:	de cf       	rjmp	.-68     	; 0x90 <main+0x24>
        	//SET_BIT(PORTA, 0);
        	//CLEAR_BIT(PORTA,1);
            }
        }
        else if (!READ_BIT(PINB, 1)) {
  d4:	e6 e3       	ldi	r30, 0x36	; 54
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	86 95       	lsr	r24
  dc:	88 23       	and	r24, r24
  de:	59 f4       	brne	.+22     	; 0xf6 <main+0x8a>
            if (!READ_BIT(PINB, 1)) {
  e0:	e6 e3       	ldi	r30, 0x36	; 54
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	86 95       	lsr	r24
  e8:	88 23       	and	r24, r24
  ea:	91 f6       	brne	.-92     	; 0x90 <main+0x24>
            	 PORTA = 0x02;
  ec:	eb e3       	ldi	r30, 0x3B	; 59
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 83       	st	Z, r24
  f4:	cd cf       	rjmp	.-102    	; 0x90 <main+0x24>
            	  //	SET_BIT(PORTA, 1);
            	  //CLEAR_BIT(PORTA,0);
            }
        }
        else {
            PORTA = 0x00;
  f6:	eb e3       	ldi	r30, 0x3B	; 59
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	10 82       	st	Z, r1
  fc:	c9 cf       	rjmp	.-110    	; 0x90 <main+0x24>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
