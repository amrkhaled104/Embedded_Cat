
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000116  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000468  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ac8  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define PINB *((volatile u8 *)0x36) // Input Pins Register B
#define DDRD *((u8 *)0x31)  // Data Direction Register D
#define PORTD *((u8 *)0x32)
#define PIND *((u8 *)0x30)

int main() {
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	61 97       	sbiw	r28, 0x11	; 17
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xff;
  96:	e7 e3       	ldi	r30, 0x37	; 55
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	80 83       	st	Z, r24
	PORTB = 0xff;
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	80 83       	st	Z, r24

	DDRD = 0x00;
  a6:	e1 e3       	ldi	r30, 0x31	; 49
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	PORTD = 0x03;
  ac:	e2 e3       	ldi	r30, 0x32	; 50
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	80 83       	st	Z, r24

	u8 arr1[10] = {
		0x3F, 0x06, 0x5B, 0x4F, 0x66,
		0x6D, 0x7D, 0x07, 0x7F, 0x6F
	};
  b4:	ce 01       	movw	r24, r28
  b6:	03 96       	adiw	r24, 0x03	; 3
  b8:	9e 87       	std	Y+14, r25	; 0x0e
  ba:	8d 87       	std	Y+13, r24	; 0x0d
  bc:	e0 e6       	ldi	r30, 0x60	; 96
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	f8 8b       	std	Y+16, r31	; 0x10
  c2:	ef 87       	std	Y+15, r30	; 0x0f
  c4:	fa e0       	ldi	r31, 0x0A	; 10
  c6:	f9 8b       	std	Y+17, r31	; 0x11
  c8:	ef 85       	ldd	r30, Y+15	; 0x0f
  ca:	f8 89       	ldd	r31, Y+16	; 0x10
  cc:	00 80       	ld	r0, Z
  ce:	8f 85       	ldd	r24, Y+15	; 0x0f
  d0:	98 89       	ldd	r25, Y+16	; 0x10
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	98 8b       	std	Y+16, r25	; 0x10
  d6:	8f 87       	std	Y+15, r24	; 0x0f
  d8:	ed 85       	ldd	r30, Y+13	; 0x0d
  da:	fe 85       	ldd	r31, Y+14	; 0x0e
  dc:	00 82       	st	Z, r0
  de:	8d 85       	ldd	r24, Y+13	; 0x0d
  e0:	9e 85       	ldd	r25, Y+14	; 0x0e
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	9e 87       	std	Y+14, r25	; 0x0e
  e6:	8d 87       	std	Y+13, r24	; 0x0d
  e8:	99 89       	ldd	r25, Y+17	; 0x11
  ea:	91 50       	subi	r25, 0x01	; 1
  ec:	99 8b       	std	Y+17, r25	; 0x11
  ee:	e9 89       	ldd	r30, Y+17	; 0x11
  f0:	ee 23       	and	r30, r30
  f2:	51 f7       	brne	.-44     	; 0xc8 <main+0x46>

	int i = 0;
  f4:	1a 82       	std	Y+2, r1	; 0x02
  f6:	19 82       	std	Y+1, r1	; 0x01
    		    continue;
    		}
    		PORTB = ~arr1[i];
    		while (READ_BIT(PIND, 1)==0);
    	}
		PORTB = ~arr1[i] ;
  f8:	a8 e3       	ldi	r26, 0x38	; 56
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	29 81       	ldd	r18, Y+1	; 0x01
  fe:	3a 81       	ldd	r19, Y+2	; 0x02
 100:	ce 01       	movw	r24, r28
 102:	03 96       	adiw	r24, 0x03	; 3
 104:	fc 01       	movw	r30, r24
 106:	e2 0f       	add	r30, r18
 108:	f3 1f       	adc	r31, r19
 10a:	80 81       	ld	r24, Z
 10c:	80 95       	com	r24
 10e:	8c 93       	st	X, r24
 110:	f3 cf       	rjmp	.-26     	; 0xf8 <main+0x76>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
